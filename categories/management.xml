<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>sef.kloninger.com (Management)</title><link>http://sef.kloninger.com/</link><description></description><atom:link href="http://sef.kloninger.com/categories/management.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sat, 19 Jul 2014 21:31:23 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Why Is That Feature Taking So Long?</title><link>http://sef.kloninger.com/posts/201301why-so-long.html</link><description>&lt;img class="alignright  wp-image-394" style="border: 0px;" alt="turd-polish" src="http://sef.kloninger.com/f/turd-polish.png" width="191" height="182"&gt;

&lt;p&gt;
I've observed a recurring source of tension:  building things fast vs. do it the right way. Usually you're not lucky enough that you can do both.  This post explains a bit why we (engineers) care so much about building things right.  Even when things are overdue and our stakeholders (end-users, biz folks, product management) are pushing to just get it done.


&lt;/p&gt;&lt;p&gt;
You can describe the two poles here in pejorative terms.  Fast is slapdash, quick and dirty, bad software.  The right way is really just ivory-tower over-engineered turd polishing.  Is that fix really so important that we shouldn't ship it? Do you really need to refactor that now?



&lt;/p&gt;&lt;p&gt;
I see three things driving engineers to build it right.

&lt;/p&gt;&lt;p&gt;
&lt;/p&gt;&lt;ol&gt;
	&lt;li&gt;&lt;strong&gt;Wrong is insidious&lt;/strong&gt;. A story: early on in Class2Go every page began with a fetch of some basic page data. If there was an error on lookup we would throw a 404. Not only is "not found" the wrong message, but it also isn't helpful. It covers up all kinds of other problems, in a way that is really difficult to debug.But for an engineer, these programming messes are &lt;a href="http://en.wikipedia.org/wiki/Broken_windows_theory"&gt;broken windows&lt;/a&gt;. Not only do they cheapen the project, they encourage others to take bad shortcuts. Heck, if they can't be bothered to handle exceptions correctly, then why should I?&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Wrong is the express train to support hell.&lt;/strong&gt; Unless you leave the company or project, you'll be called upon to support your own crappy code. That is certain. And there is almost nothing worse than being dragged back to debug some old code that you never meant to become production, and is now breaking the world.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Wrong hurts your reputation as an engineer&lt;/strong&gt;. People see you taking shortcuts and infer that you are a sloppy programmer. And really they aren't wrong to do so. One habit of really good engineers is they don't leave a wake of messes behind them. They are able to do things (mostly) right even when they are moving fast.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
This last point is really the key one. Amongst engineers your reputation is your hard currency. It affects what projects you're invited to work on and what companies you'll be asked to join. Most importantly, good engineers only want to work with other good engineers, and they won't seek out someone sloppy. So I assume that any code I write will be looked at by a potential colleague or employer. This is especially true when working on an open-source project.



&lt;/p&gt;&lt;p&gt;
This doesn't mean you have to go slow -- indeed, on my current project, &lt;a href="http://class2go.stanford.edu/" target="_blank"&gt;Class2Go&lt;/a&gt;, we get a lot done every week. What it does mean is that sometimes I'd rather not do something than do something I know will come out poorly.



&lt;/p&gt;&lt;p&gt;
So, product manager waiting on a feature. What to do if you're waiting on an engineer and you think it's taking too damn long? The tactic **not** to use: tell them this won't matter and to just ship it. That will just piss him off. Better: get your senior engineer to convince the junior one why it's good enough to ship and reason about what really needs to get done. Exception: if the engineer you're waiting on is your senior engineer, then trust her judgment and wait.



&lt;/p&gt;&lt;p&gt;
And finally, to you product managers and biz folks who push. You are right do do so. That's all that matters to the customers, all matters at the end of the day. Keep it up.&lt;/p&gt;</description><category>Management</category><category>Technology</category><guid>http://sef.kloninger.com/posts/201301why-so-long.html</guid><pubDate>Fri, 25 Jan 2013 01:24:48 GMT</pubDate></item><item><title>Two Things At Once</title><link>http://sef.kloninger.com/posts/201206two-things-at-once.html</link><description>&lt;p&gt;
Engineering management is about solving problems and removing obstacles. You always have more problems than time and resources to solve them. How can you stay on top of it all?


&lt;/p&gt;&lt;p&gt;
&lt;img class="alignright  wp-image-289" style="border: 0px;" title="to-do-list" src="http://sef.kloninger.com/f/to-do-list.jpg" alt="" width="191" height="181"&gt;

&lt;/p&gt;&lt;p&gt;
A trick I learned from &lt;a href="https://twitter.com/#!/austinfish" target="_blank"&gt;Julia Austin&lt;/a&gt; (my boss at Akamai some years back) was force yourself to always solve two problems at once. Before jumping on today's problem, figure out something else you can fix at the same time.



&lt;/p&gt;&lt;p&gt;
Say you have a retention problem. Engineering department scuttlebutt is that people are burned out with maintenance projects. But you are also concerned about your low &lt;a href="http://en.wikipedia.org/wiki/Bus_factor" target="_blank"&gt;bus number&lt;/a&gt;. I had these two problems once, and my answer was to actively shuffle engineers around onto other projects. Not quite musical chairs, but close. It worked. The engineers liked the variety, and I gave my top performers first dibs on projects, which they appreciated. There was a short-term productivity hit, but it was worth the benefits from cross-pollination and engineer happiness.



&lt;/p&gt;&lt;p&gt;
Another real-life example. I had a remote office that felt disconnected and needed some knowledge-sharing love. I had to send someone over for a few weeks. I initially planned on sending my go-to senior person, but they had had been before and to them an international trip was a chore. Instead I had an up-and-coming engineer who I wanted to invest in. This trip was a stretch for her, but I did some coaching and she did great.  Plus she saw it as a perq and appreciated the responsibility.



&lt;/p&gt;&lt;p&gt;
This technique has driven a couple good behaviors for me as an engineering manager. I try  to take a minute before jumping in with a solution to see what else I can do while I'm at it.  It also has helped me to keep a useful (and secret) worry list and to consult it from time to time. That list is a useful way for &lt;a href="http://c2.com/cgi/wiki?FourQuadrants"&gt;important but not urgent&lt;/a&gt; problems to get mindshare. Reviewing that list became part of my Sunday evening get-ready-for-the-week routine.



 



 &lt;/p&gt;</description><category>Management</category><guid>http://sef.kloninger.com/posts/201206two-things-at-once.html</guid><pubDate>Tue, 05 Jun 2012 13:50:39 GMT</pubDate></item><item><title>FizzBuzz Questions for Engineering Managers</title><link>http://sef.kloninger.com/posts/201205fizzbuzz-for-managers.html</link><description>&lt;img class="size-full wp-image-272 alignleft" style="padding:20px; float:left" title="fizzbuzz" src="http://sef.kloninger.com/f/fizzbuzz.png" alt="" width="116" height="166"&gt;

&lt;p&gt;You probably wouldn't hire an engineer that you hadn't seen code. But people tend to hire  engineering managers without seeing them manage. I contend that's a big oversight: you should see them manage on their feet, at least a little.  But how?

&lt;/p&gt;&lt;p&gt;
I'm thinking along the lines of the "FizzBuzz" class of questions. I believe they got some fame with &lt;a href="http://imranontech.com/2007/01/24/using-fizzbuzz-to-find-developers-who-grok-coding/" target="_blank"&gt;this article&lt;/a&gt; in 2007, and Google &lt;a href="http://www.google.com/trends/?q=fizzbuzz" target="_blank"&gt;seems to support this&lt;/a&gt;. Anyway, they are simple programming problems that should be no-brainers for any decent engineer. But they are useful exactly because of the surprisingly large number of candidates who flame out on them. By some accounts, as high as 50%.



&lt;/p&gt;&lt;p&gt;
So what we want are something similar for engineering managers:  practical questions that can be done within the constraints of an interview. Here are a few that have been useful for me.

&lt;/p&gt;&lt;h2&gt;Role Playing&lt;/h2&gt;

&lt;p&gt;
Instead of asking them how they would do something, just ask them to do that thing in front of you. Role playing can be awkward if you've never done it before, but give it a try. Once you get over the hump and try it, it can be fun. Here are three good scenarios I've used.

&lt;/p&gt;&lt;p&gt;
&lt;/p&gt;&lt;ul&gt;
	&lt;li&gt;&lt;em&gt;"I'm a product manager. Customer Foo (say, one of our biggest customers) wants a feature right before the release is to go out. You're the VP of Engineering. You feel like this will destabilize your release.  How do you say no?"&lt;/em&gt;  Sometimes it can be fun to play out the natural follow-up, when they go over your head to the CEO.&lt;/li&gt;
	&lt;li&gt;&lt;em&gt;"I'm a slacking employee. I have the skills, but for some reason I haven't been productive lately. It's our weekly one-on-one time -- what do you say?"&lt;/em&gt;&lt;/li&gt;
	&lt;li&gt;&lt;em&gt;"You have to lay someone off. How do you prepare? What do you say?"&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
If they have follow up questions, or dispute the premise, then play it out. Usually those end up being the most insightful and fun interviews. Also, one warning: questions like these can take you far down the rabbit hole and use up the whole hour if you're not careful.  Remember that its your time.  You should cut them off and switch to the next question, abruptly if need be, to get to everything you need to cover.

&lt;/p&gt;&lt;h2&gt;Nuts and Bolts&lt;/h2&gt;

&lt;p&gt;
Ask candidates about the mechanics of how they do their job and you can get insight into their experience and values. What tools (wikis, bug tracking, source control, continuous testing) do they use? Do they run team meetings or daily standups? If so, how do these go?



&lt;/p&gt;&lt;p&gt;
What you're looking for are &lt;em&gt;thoughtful&lt;/em&gt; answers. Anyone who has used these tools a lot should have opinions about the them. If they don't then they don't care (bad) or they haven't done the work (bad). Are they negative about everything? Are they flexible?

&lt;/p&gt;&lt;h2&gt;Motivation&lt;/h2&gt;

&lt;p&gt;
For me this often is the clincher. Why did you get into engineering management in the first place? Why are you doing it now? I won't say what I consider to be good answers, since this varies a lot and should be pretty personal. Again, what you're looking for is a thoughtful answer.



&lt;/p&gt;&lt;p&gt;
This can be most useful for turning up red-flag responses. You don't want the person who did it for power ("I wanted to boss people around") or ambition ("I wanted to make more money") or just fell into it.  Trust your gut for answers that don't sound genuine and ask probing follow-ups.



&lt;/p&gt;&lt;p&gt;
I find questions like these can lead to more insightful conversations and get the candidate off-script faster than the typical resume walkthrough.



 &lt;/p&gt;</description><category>Management</category><category>Technology</category><guid>http://sef.kloninger.com/posts/201205fizzbuzz-for-managers.html</guid><pubDate>Wed, 23 May 2012 10:06:59 GMT</pubDate></item><item><title>Why Quit?  Because They Have Bigger Monitors</title><link>http://sef.kloninger.com/posts/201205engineering-culture-litmus-tests.html</link><description>&lt;p&gt;
Good engineers are attracted to places with a strong engineering culture. But how can you see what the culture is really like from the outside? Here are my two quick-and-dirty indicators.

&lt;img class="alignright size-full wp-image-230" style="border: 0px;" title="testtubes" src="http://sef.kloninger.com/f/testtubes.png" alt="" width="149" height="200"&gt;


&lt;/p&gt;&lt;p&gt;
First a word about what I mean by an engineering culture. It means engineers are valued and important. Some implications:
&lt;/p&gt;

&lt;p&gt;
&lt;/p&gt;&lt;ul&gt;
	&lt;li&gt;How are decisions made? In an engineering culture, technical people have input into what gets built, when, and by whom.  Not signoff, but a real say.&lt;/li&gt;
	&lt;li&gt;Is there respect for the craft of making software? Coding is still creative work that requires the right time and space. Some projets are tough to predict how long they will take, and that's needs to be OK.&lt;/li&gt;
	&lt;li&gt;Infrastructure. How hard is it for the people who know (engineers, managers) to justify to their bosses when work is needed on non-feature driven stuff? This could be in the runtime system (like scaling work on the message queue) or back office (like build systems or version control).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
Unfortunately, teasing this out in an interview can be tricky unless you have someone you really know and trust on the inside.

&lt;/p&gt;&lt;p&gt;
&lt;/p&gt;&lt;h2&gt;How big are the monitors?&lt;/h2&gt;

A story from a prior company. I was an engineering manager that had a retention problem. One of the engineers on my team quit to go to a smaller, hipper company. This was from my exit interview:

&lt;p&gt;
&lt;/p&gt;&lt;blockquote&gt;

&lt;p&gt;
&lt;strong&gt;Me&lt;/strong&gt;: why are you leaving?

&lt;/p&gt;&lt;p&gt;
&lt;strong&gt;Him&lt;/strong&gt;: because they have bigger monitors.

&lt;/p&gt;&lt;p&gt;
&lt;strong&gt;Me&lt;/strong&gt;: (incredulous) are you kidding? we can get you a bigger monitor.

&lt;/p&gt;&lt;p&gt;
&lt;strong&gt;Him&lt;/strong&gt;: it's not just me -- everyone has big monitors.

&lt;/p&gt;&lt;p&gt;
&lt;strong&gt;Me&lt;/strong&gt;: why is that so important?

&lt;/p&gt;&lt;p&gt;
&lt;strong&gt;Him&lt;/strong&gt;: because it shows how much they value my time. The extra money to cram that many more pixels into my retina must be worth it to them.

&lt;/p&gt;&lt;/blockquote&gt;

And now I understand that this is totally true. Places that value their people consider equipment expenses small compared to the productivity (and happiness) of their people.  The best engineers are given the best tools to do their jobs. Big monitors are a very visible sign of this.

&lt;h2&gt;Can people choose their own email addresses?&lt;/h2&gt;

Non-engineers sometimes don't appreciate how important an email address is. It's your identity on line. A strict naming convention (first name last initial, or worse, last name first initial) indicates place that values conformity over engineer happiness. Worse, its a great way to make their people feel like cogs or "human resources," not the cool individuals that they are.

&lt;p&gt;
(Aside: let's do away with the term Human Resources.  It's horrible.)

&lt;/p&gt;&lt;p&gt;
This one is important for me personally since I have a weird first name. If you don't let me be &lt;code&gt;sef@company.com&lt;/code&gt; then you get major demerits in my book. And no, clunky alias tricks, like a mailing list with one member in it, doesn't count. It's what you see on your shell prompt that matters; it's what &lt;code&gt;whoami&lt;/code&gt; returns that matters.

&lt;/p&gt;&lt;p align="center"&gt;
&lt;img class="alignnone size-full wp-image-235" style="border: 0px;" title="whoami" src="http://sef.kloninger.com/f/whoami.png" alt="" width="556" height="226"&gt;

&lt;/p&gt;&lt;p&gt;
One final word: this isn't a slam on you hardworking IT guys and gals who keep important things running and have to enforce the rules you're given. Instead, I'm speaking to the bad policies (usually stemming from bad cultures) that can put you into bad positions. If you are at such a place, hunker down and pray for daylight.

 &lt;/p&gt;</description><category>Management</category><category>Technology</category><guid>http://sef.kloninger.com/posts/201205engineering-culture-litmus-tests.html</guid><pubDate>Thu, 17 May 2012 16:01:44 GMT</pubDate></item><item><title>"I absorb uncertainty."</title><link>http://sef.kloninger.com/posts/201205i-absorb-uncertainty.html</link><description>&lt;p&gt;
It was my first day at Akamai.  They were still small enough that the all new employees had group lunch with the CEO, George Conrades.


&lt;/p&gt;&lt;p&gt;
For those who don't know him, George is flat out impressive. Partially that comes from being smart, thoughtful, and well spoken. But it also comes from being comfortable in &lt;strong&gt;big&lt;/strong&gt; jobs. Prior to Akamai, George was CEO of BBN and GM of IBM United States, part of his thirty year career at IBM.



&lt;/p&gt;&lt;p&gt;
Somoene asked George what he did as CEO, and George unpacked his stock answer. Something about products, people, and finances.



&lt;/p&gt;&lt;p&gt;
The new hire followed up: "No, George, what do &lt;strong&gt;you&lt;/strong&gt; actually &lt;strong&gt;do&lt;/strong&gt;?" It was a pointed question, and a bit smart-alecky. But it was also genuine, and George took it seriously. His answer stuck with me.



&lt;/p&gt;&lt;p&gt;
"I absorb uncertainty," George said.



&lt;/p&gt;&lt;p&gt;
He explained: If you get this many bright people together you're bound to have differences of opinion. Those can escalate into a real disagreement. Soon it gets heated and feelings and reputations are at stake. When this happens, the CEO's job is to hear and follow the discussion, know when forward progress isn't being made, and then make a decision. And then communicate that decision clearly so everyone can move on.



&lt;/p&gt;&lt;p&gt;
Making a decision absorbs uncertainty. Uncertainty disempowers your people and paralyzes your organization. A good CEO doesn't let that happen.



&lt;/p&gt;&lt;p&gt;
Now that's a good leader.  Thanks, George.



&lt;/p&gt;&lt;p&gt;
PS - Googling around for this phrase, I see others might have used it too.  One is Vittorio Cassoni, reported by Esther Dyson (&lt;a href="http://online.wsj.com/article/00FE1687-EE39-415D-A5C7-CA9948ED3CF6.html" target="_blank"&gt;video&lt;/a&gt;). But in my book, credit goes to GHC.



 &lt;/p&gt;</description><category>Management</category><category>Technology</category><guid>http://sef.kloninger.com/posts/201205i-absorb-uncertainty.html</guid><pubDate>Thu, 03 May 2012 12:41:28 GMT</pubDate></item><item><title>Working Hard, On The Right Stuff, and In The Right Way</title><link>http://sef.kloninger.com/posts/201204measuring-an-engineering-manager.html</link><description>&lt;a href="http://sef.kloninger.com/2012/04/measuring-an-engineering-manager/pointy-haired_boss/" rel="attachment wp-att-147"&gt;&lt;img class="alignright size-full wp-image-147" style="border-style: initial; border-color: initial; border-image: initial; border-width: 0px;" title="Pointy-Haired-Boss" src="http://sef.kloninger.com/f/Pointy-Haired_Boss.png" alt="Pointy Haired Boss" width="196" height="204"&gt;&lt;/a&gt;

&lt;p&gt;
So now you're an engineering manager. How do you know if you're doing a good job?
&lt;/p&gt;


&lt;p&gt;
This was an important question for me about thirteen years ago, when I moved from a code-every-day software engineer into my first management job. In the decade-plus I've been an engineering manager (&lt;a href="http://sef.kloninger.com/2012/04/my-sabbatical/"&gt;up until recently&lt;/a&gt;) I've relied on three measures for myself and engineering managers under me.  It's the title of this post.
&lt;/p&gt;



&lt;p&gt;
The problem is that managers enable their people to produce. An engineer's contribution is measurable, more or less. Even when the scale and units are slippery (is that 95% or 50% done?) at least you can see forward progress: releases, bugs closed, API users. But an engineering manager? At best it feels squishy; at worst it feels like overhead, and nobody wants to be overhead.
&lt;/p&gt;



&lt;p&gt;
The question of "am I doing a good job?" came up when I was a first-time engineering manager at Akamai Technologies.  This was 1999 and Akamai was still small-ish (30 engineers).  Us first-time managers were learning on the job. That's when I distilled down my three rules.  They are:
&lt;/p&gt;

&lt;p&gt;
&lt;/p&gt;&lt;blockquote&gt;
A good engineering manager's team should be
&lt;ol&gt;
&lt;li&gt;working hard,&lt;/li&gt;
&lt;li&gt;working on the right stuff, and&lt;/li&gt;
&lt;li&gt;doing it the right way.&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;


&lt;p&gt;
The key insight here is that you don't measure the manager herself, since management done well just enables the creative work of the team. Judge the team and you judge the manager.
&lt;/p&gt;

&lt;h2&gt;Working Hard&lt;/h2&gt;

&lt;p&gt;
Of course a high-performing team is inherently good. But it's also the best indicator if the manager is doing their job right. A productive team is a motivated team. In my experience, teams don't work hard unless they have all the wonderful qualities that we want in a team: empowerment, alignment with company goals, feeling of camaraderie, trust in management. They should be equipped to do their work and know why they're doing it. A manager should try to give their teams these things, or at least not get in the way.
&lt;/p&gt;



&lt;p&gt;
Let's consider the alternative. If your engineers are demotivated or bored then long before they quit (&lt;a href="http://www.randsinrepose.com/archives/2011/07/12/bored_people_quit.html"&gt;and they will&lt;/a&gt;) they will check out.
&lt;/p&gt;



&lt;p&gt;
One caution: working hard is often confused with long hours and face time. It's not. And there are few things more demotivating to a team than a manager demanding more hours. (Some places are really productive and &lt;a href="http://ryanleecarson.tumblr.com/post/21708810513/4-day-week"&gt;only work four days a week&lt;/a&gt;.)
&lt;/p&gt;



&lt;p&gt;
Hiring and firing figures into this too. An under-staffed team can't do what it needs to do or can get burnt out. Worse, lowering the bar to hire someone beneath the team, or not firing the low performer, is hugely demotivating.
&lt;/p&gt;




&lt;h2&gt;Working On The Right Stuff&lt;/h2&gt;

&lt;p&gt;
This is where the manager can have a more direct and immediate impact. You have to set up a few good processes (not too many) and enforce them.  Your goal is maximize useful work.  One way is to prevent work on stuff that will be wasted.  Another is to reduce thrashing by finishing one thing before starting another. This is where delivery comes in: it's one thing to be busy, but how much makes it into real customers' hands?
&lt;/p&gt;


&lt;p&gt;
Some of this sounds like product management, especially prioritization and product definition. But it doesn't happen well without the engineering manager communicating well, working closely with those product managers, pushing back constructively when needed.  So actually read that spec!
&lt;/p&gt;


&lt;p&gt;
Much of my career has been in backend systems. Infrastructure projects to enable features are the exceptions. Most aim to improve reliability by doing things like removing bottlenecks (scaling) or bulletproofing systems. Unfortunately I think the only way to judge these projects qualitatively.  Measuring how often it &lt;em&gt;would&lt;/em&gt; have broken is so hard. Just make sure you get a techie who you trust to evaluate projects impersonally and critically. And be careful of pet projects.
&lt;/p&gt;

&lt;h2&gt;Doing It The Right Way&lt;/h2&gt;

&lt;p&gt;
For many years I only had the first two measures. But I've come to value this one more over time.
&lt;/p&gt;



&lt;p&gt;
This criteria captures quality and culture. Are the manager's engineers working well together? Best judge of this is if other engineers want to be in this group. Do the engineers have a culture of quality? They should speak with pride of their work. If they feel their products are slipshod, through lack of care or lack of room to do the job right, then it will show.

&lt;/p&gt;


&lt;p&gt;
It also means that they aren't leaving scorched earth behind them. Their systems are maintainable and usable by others; the ops guys don't hate them because of missing tools or crappy logs; they've done code reviews and actually listened to the feedback.
&lt;/p&gt;

&lt;h2&gt;Anti-Patterns&lt;/h2&gt;

&lt;p&gt;
There are a couple of other things that I &lt;strong&gt;haven't&lt;/strong&gt; mentioned as being important. They're probably on others' lists, but not on mine.
&lt;/p&gt;

&lt;p&gt;
&lt;/p&gt;&lt;ol&gt;
	&lt;li&gt;"Leadership." To some people this means that you know how to tell people what to do. To others it means just doing a lot of the things above well, like communication. I'm not disagreeing that it's not important, I just don't know how to define or measure it. It feels like one of those "you know it when you see it" things.&lt;/li&gt;
	&lt;li&gt;Well-triaged bug lists; great status reports; well-run team meetings. If any of these things help you accomplish the three things above, then do them, if not then they're paperwork.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;
For example, when I managed a large team at VMware I spent a lot of time triaging bugs. That's the VMware's engineering culture, but it's also what you need for a large, distributed team delivering enterprise software. By contrast, at Ning I spent very little time in the bug database. That team was much smaller (6 vs 100), and our releases were less complicated and less scary. And that was the right way to manage that team.
&lt;/p&gt;



&lt;p&gt;
Finally, I want to credit some of those early managers in those Akamai days that I learned with/from:

&lt;/p&gt;&lt;ul&gt;
	&lt;li&gt;Experienced managers like George Conrades, Danny Lewin, Tom Leighton and Ross Seider&lt;/li&gt;
	&lt;li&gt;Fellow newcomers like Joel Wein, Ravi Sundaram, Harald Prokop, Marty Kagan, Jay Parikh, Julia Austin, and Bobby Blumofe&lt;/li&gt;
	&lt;li&gt;Thoughtful techies like Danner Stodolsky, Bill Weihl, Erik Nygren, and Chris Joerg.&lt;/li&gt;
&lt;/ul&gt;


</description><category>Management</category><category>Technology</category><guid>http://sef.kloninger.com/posts/201204measuring-an-engineering-manager.html</guid><pubDate>Wed, 25 Apr 2012 01:39:34 GMT</pubDate></item></channel></rss>