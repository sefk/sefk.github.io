<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>sef.kloninger.com (Technology)</title><link>http://sef.kloninger.com/</link><description></description><atom:link href="http://sef.kloninger.com/categories/technology.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Wed, 27 May 2015 05:46:33 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>K&amp;R C Programming, Quantum Books, Cambridge, MA</title><link>http://sef.kloninger.com/posts/201309knr-c-label.html</link><dc:creator>Sef Kloninger</dc:creator><description>&lt;p style="text-align: left;"&gt;&lt;img class="alignright  wp-image-433" style="border: 0px;" alt="IMG_4177" src="http://sef.kloninger.com/f/IMG_41771-231x300.jpg" width="139" height="180"&gt;

&lt;/p&gt;&lt;p&gt;
Today in a box I came across my old K&amp;amp;R. Probably the most valuable book I've owned. My copy has been heavily used.&lt;/p&gt;

&lt;p&gt;
But the unexpected, fun thing was finding an old label on the back cover.



&lt;/p&gt;&lt;p&gt;
There is a lot in there.

&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="aligncenter  wp-image-429" style="border: 0px;" alt="IMG_4179" src="http://sef.kloninger.com/f/IMG_4179-1024x393.jpg" width="584" height="224"&gt;&lt;/p&gt;



&lt;p&gt;
&lt;/p&gt;&lt;ul&gt;
	&lt;li&gt;January 1994. I had just graduated college, driven cross country with my friend &lt;a href="http://sef.kloninger.com/posts/www.linkedin.com/pub/shigeru-tanaka/0/a27/917"&gt;Shig&lt;/a&gt;, and started my first post-college job. I would have been in that job four months or so and realized that I should just stop borrowing someone else's copy (probably &lt;a href="http://sef.kloninger.com/posts/www.linkedin.com/in/larryclaman/"&gt;Larry Claman&lt;/a&gt;'s) and buy my own.&lt;/li&gt;
	&lt;li&gt;Purchased at Quantum Books, a great technical bookstore in the shadow of MIT in Cambridge, Massachusetts. It's no longer there. The bar that is there now (&lt;a style="font-style: normal;" href="http://www.themeadhall.com/"&gt;Meadhall&lt;/a&gt;) is a nice place, and I'm a big fan of beer, but it's not the same.&lt;/li&gt;
	&lt;li&gt;According to an &lt;a style="font-style: normal;" href="http://www.bls.gov/data/inflation_calculator.htm"&gt;inflation calculator&lt;/a&gt;, $35 in 1994 is $55 today. That's expensive for a little book, especially to the twenty-two year old me.&lt;/li&gt;
	&lt;li&gt;Note the email address: quanbook@world.std.com. This was back when mom and pop dialup ISP's where what we all used, people and businesses alike. This particular one, &lt;a style="font-style: normal;" href="http://world.std.com/"&gt;Software Tool &amp;amp; Die&lt;/a&gt;, was my private email address at the time too. (Aside: they claim to be the first public dialup ISP, and I have no reason to doubt them)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
It was fun being reminded of all this stuff. So the lesson of the story: it's still worth buying books, and when you do, don't remove the labels.&lt;/p&gt;</description><category>Life</category><category>Technology</category><guid>http://sef.kloninger.com/posts/201309knr-c-label.html</guid><pubDate>Sun, 15 Sep 2013 00:41:20 GMT</pubDate></item><item><title>Launch Day</title><link>http://sef.kloninger.com/posts/201306launch-day.html</link><dc:creator>Sef Kloninger</dc:creator><description>&lt;img class="alignright  wp-image-415" style="border: 0px;" alt="spaceshuttle" src="http://sef.kloninger.com/f/spaceshuttle-300x283.png" width="180" height="170"&gt;

&lt;p&gt;
Today was launch day. It went really well.  I wanted to capture what a good launch feels like and contrast that with a more exciting launch, just five months ago.


&lt;/p&gt;&lt;p&gt;
Today we turned on our first class on Stanford's instance the open-source &lt;a href="http://code.edx.org"&gt;edX platform&lt;/a&gt;, what we're calling &lt;a href="http://online.stanford.edu/openedx"&gt;OpenEdX&lt;/a&gt;. The class is &lt;a href="https://class.stanford.edu/courses/Medicine/HRP258/Statistics_in_Medicine"&gt;Statistics in Medicine&lt;/a&gt;, taught by Kristin Sainani of the Stanford School of Medicine. With over thirteen thousand students signed up it's a medium-sized MOOC (Massive Open Online Course).



&lt;/p&gt;&lt;p&gt;
We have launched MOOC's for Stanford before: two in &lt;a href="http://networking.class.stanford.edu/"&gt;Fall&lt;/a&gt; &lt;a href="http://solar.class.stanford.edu/"&gt;Quarter&lt;/a&gt;, and one in &lt;a href="http://db.class.stanford.edu/"&gt;Winter&lt;/a&gt;. Even though the classes were huge success, but the launch days weren't so smooth. We had written that platform, &lt;a href="http://class2go.stanford.edu/"&gt;Class2Go&lt;/a&gt;, from the ground up with a small team in a dozen weeks in Fall; in the weeks before the Winter launch we ripped out the whole evaluation system, about one-third of the code, and replaced it with a whole new engine. In both cases most of our code was fresh off the presses.



&lt;/p&gt;&lt;p&gt;
Those launches were rocky. I'll tell the story of the DB class launch in January. The first thing we do is a "soft launch," where you open the front door and some people find their way in. Those first visits give you a sense of how things will go.  Surprisingly, the servers were a bit busy.  But we wanted to keep going, so we scaled up capacity and moved on.



&lt;/p&gt;&lt;p&gt;
The thing that drives real traffic is the announcement email. That gets people to the site. The announcements started going out, students started coming in, and the site lit up. We were in hot water. Servers were overloaded, and most surprising, the database was getting hammered. This was scary and unexpected. We control-C'ed the mail job and quickly hacked additional caching into the site.  We had to trickle out announcements over the next twelve hours.  We made it, but it was a long, stressful day.



&lt;/p&gt;&lt;p&gt;
And then the days/weeks post-launch were spent watching graphs, triaging 500 errors (user-visible "we're sorry" pages), and installing daily hotfixes. But we got through it. The classes were a success and the team was proud.



&lt;/p&gt;&lt;p&gt;
So, contrast that to today's launch.  Totally different.



&lt;/p&gt;&lt;p&gt;
Everyone came in early as usual. I bought bagels. We turned on the class (soft-launch) and the servers hardly noticed. We sent the announcement mails, people came and took their pre-course survey and watched the intro video. Hardly any load. This chart shows the average CPU on our four appservers from 8:00 AM PDT / 15:00 UTC until 10:45 AM or so.



&lt;/p&gt;&lt;p align="center"&gt;
&lt;img class="alignnone  wp-image-414" style="border: 0px;" alt="launch-app-cpu" src="http://sef.kloninger.com/f/launch-app-cpu1.png" width="1530" height="373"&gt;



&lt;/p&gt;&lt;p&gt;
Those are happy servers. Other charts we watched (db connections, load, etc.) told the same story. The most impressive thing was not a single user visible error, no 500's!



&lt;/p&gt;&lt;p&gt;
Those folks at edX made some solid software.  We're happy to be working with a strong group of engineers and a quality product.  We've had our hands on it only since April, and it was released open-source to the world on June 1.  I fully expect a lot of other universities and organizations are going to have a great time running classes on OpenEdX too.



&lt;/p&gt;&lt;p&gt;
I just turned off half the appservers since we're fine on capacity. Now off to bed with a good feeling.

&lt;/p&gt;</description><category>Education</category><category>Technology</category><guid>http://sef.kloninger.com/posts/201306launch-day.html</guid><pubDate>Wed, 12 Jun 2013 05:59:24 GMT</pubDate></item><item><title>Coding on a Flight</title><link>http://sef.kloninger.com/posts/201304coding-on-a-flight.html</link><dc:creator>Sef Kloninger</dc:creator><description>&lt;img class="alignright  wp-image-408" style="border: 0px;" alt="airplane" src="http://sef.kloninger.com/f/airplane-300x126.png" width="240" height="101"&gt;

&lt;p&gt;
I'm surprised that that I like coding on flights. It's surprising because airplanes are generally hostile environments for most things, but I've found it a good place to code.



&lt;/p&gt;&lt;p&gt;
The obvious reason is the lack of interruptions and distractions. Usualy there is no wifi, or it is too spotty to count on. So no email or IRC or web. While I know that distractions kill flow, I never seem give myself license to unplug in normal life. I'm a manager, and being a manager means being interruptible.



&lt;/p&gt;&lt;p&gt;
But there's another reason. When I code unplugged, I code differently. I have to be self-sufficient. Instead of just looking things up on StackOverflow, I take 20% more time to figure it out myself. That's much more satisfying! It's just not that hard to rummage through the Django code or try things out in iPython.



&lt;/p&gt;&lt;p&gt;
Also it just sounds cool to say you coded something up on the flight.



&lt;/p&gt;&lt;p&gt;
But thre real question is should simulate "airplane mode" when grounded.  Hmm.&lt;/p&gt;</description><category>Life</category><category>Technology</category><guid>http://sef.kloninger.com/posts/201304coding-on-a-flight.html</guid><pubDate>Tue, 09 Apr 2013 05:30:38 GMT</pubDate></item><item><title>"Low" Retention Rates in Online Education Isn't Necessarily A Bad Thing</title><link>http://sef.kloninger.com/posts/201303online-ed-retention.html</link><dc:creator>Sef Kloninger</dc:creator><description>&lt;img class="alignright  wp-image-400" style="border: 0px;" alt="Evaluate-300x198" src="http://sef.kloninger.com/f/Evaluate-300x198.png" width="240" height="158"&gt;

&lt;p&gt;
I am of two minds about &lt;a title="Peter Reinhardt" href="http://rein.pk/online-educations-dirty-secret-awful-retention/" target="_blank"&gt;Peter Reinhardt post today&lt;/a&gt; calling out online education's poor retention rates.


&lt;/p&gt;&lt;p&gt;
I agree that retention rates are low. At Stanford we we just completed the Winter run of Jennifer Widom's &lt;a title="Introduction to Databases" href="http://db.class2go.stanford.edu/" target="_blank"&gt;Database Class&lt;/a&gt;, here are the course stats:

&lt;/p&gt;&lt;p&gt;
&lt;/p&gt;&lt;ul&gt;
	&lt;li&gt;Registered: 64,127&lt;/li&gt;
	&lt;li&gt;Turned in some work: 20,836&lt;/li&gt;
	&lt;li&gt;Took the final exam: 4,771&lt;/li&gt;
	&lt;li&gt;Received a Statement of Accomplishment: 4,854 (1,927 with distinction)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
How do I feel that 23% of students who started the class finished? Or that only 7.6% who enrolled finished? Mostly I'm fine with that. I think there's a lot of value in someone kicking the tires. Some were experimenting with on-line education, some didn't know before hand if the class would be right for them. I share &lt;a title="Curt Bonk, University of Indiana" href="http://php.indiana.edu/~cjbonk/" target="_blank"&gt;Curt Bonk&lt;/a&gt;'s view that this shouldn't be seen as a black mark but as another form of outreach.



&lt;/p&gt;&lt;p&gt;
I consider this over forty thousand people who got some exposure to the topic, the platform, and what this MOOC thing is all about.



&lt;/p&gt;&lt;p&gt;
But I totally agree that increasing retention is a worthwhile goal and a valuable metric.   Online education platforms (mine included) should do what we can to keep students engaged.  This article has many good suggestions.  And there's a lot of room for experimentation.



&lt;/p&gt;&lt;p&gt;
(disclaimer: I'm the engineering manager on &lt;a title="Class2Go from Stanford" href="http://class2go.stanford.edu/" target="_blank"&gt;Class2Go&lt;/a&gt;, the open-source MOOC platform we've built at Stanford)&lt;/p&gt;</description><category>Education</category><category>Technology</category><guid>http://sef.kloninger.com/posts/201303online-ed-retention.html</guid><pubDate>Sun, 31 Mar 2013 19:23:15 GMT</pubDate></item><item><title>Why Is That Feature Taking So Long?</title><link>http://sef.kloninger.com/posts/201301why-so-long.html</link><dc:creator>Sef Kloninger</dc:creator><description>&lt;img class="alignright  wp-image-394" style="border: 0px;" alt="turd-polish" src="http://sef.kloninger.com/f/turd-polish.png" width="191" height="182"&gt;

&lt;p&gt;
I've observed a recurring source of tension:  building things fast vs. do it the right way. Usually you're not lucky enough that you can do both.  This post explains a bit why we (engineers) care so much about building things right.  Even when things are overdue and our stakeholders (end-users, biz folks, product management) are pushing to just get it done.


&lt;/p&gt;&lt;p&gt;
You can describe the two poles here in pejorative terms.  Fast is slapdash, quick and dirty, bad software.  The right way is really just ivory-tower over-engineered turd polishing.  Is that fix really so important that we shouldn't ship it? Do you really need to refactor that now?



&lt;/p&gt;&lt;p&gt;
I see three things driving engineers to build it right.

&lt;/p&gt;&lt;p&gt;
&lt;/p&gt;&lt;ol&gt;
	&lt;li&gt;&lt;strong&gt;Wrong is insidious&lt;/strong&gt;. A story: early on in Class2Go every page began with a fetch of some basic page data. If there was an error on lookup we would throw a 404. Not only is "not found" the wrong message, but it also isn't helpful. It covers up all kinds of other problems, in a way that is really difficult to debug.But for an engineer, these programming messes are &lt;a href="http://en.wikipedia.org/wiki/Broken_windows_theory"&gt;broken windows&lt;/a&gt;. Not only do they cheapen the project, they encourage others to take bad shortcuts. Heck, if they can't be bothered to handle exceptions correctly, then why should I?&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Wrong is the express train to support hell.&lt;/strong&gt; Unless you leave the company or project, you'll be called upon to support your own crappy code. That is certain. And there is almost nothing worse than being dragged back to debug some old code that you never meant to become production, and is now breaking the world.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Wrong hurts your reputation as an engineer&lt;/strong&gt;. People see you taking shortcuts and infer that you are a sloppy programmer. And really they aren't wrong to do so. One habit of really good engineers is they don't leave a wake of messes behind them. They are able to do things (mostly) right even when they are moving fast.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
This last point is really the key one. Amongst engineers your reputation is your hard currency. It affects what projects you're invited to work on and what companies you'll be asked to join. Most importantly, good engineers only want to work with other good engineers, and they won't seek out someone sloppy. So I assume that any code I write will be looked at by a potential colleague or employer. This is especially true when working on an open-source project.



&lt;/p&gt;&lt;p&gt;
This doesn't mean you have to go slow -- indeed, on my current project, &lt;a href="http://class2go.stanford.edu/" target="_blank"&gt;Class2Go&lt;/a&gt;, we get a lot done every week. What it does mean is that sometimes I'd rather not do something than do something I know will come out poorly.



&lt;/p&gt;&lt;p&gt;
So, product manager waiting on a feature. What to do if you're waiting on an engineer and you think it's taking too damn long? The tactic **not** to use: tell them this won't matter and to just ship it. That will just piss him off. Better: get your senior engineer to convince the junior one why it's good enough to ship and reason about what really needs to get done. Exception: if the engineer you're waiting on is your senior engineer, then trust her judgment and wait.



&lt;/p&gt;&lt;p&gt;
And finally, to you product managers and biz folks who push. You are right do do so. That's all that matters to the customers, all matters at the end of the day. Keep it up.&lt;/p&gt;</description><category>Management</category><category>Technology</category><guid>http://sef.kloninger.com/posts/201301why-so-long.html</guid><pubDate>Fri, 25 Jan 2013 09:24:48 GMT</pubDate></item><item><title>Managing Work-In-Progress Folders with "ls -ltr"</title><link>http://sef.kloninger.com/posts/201208wip-folders-with-ls.html</link><dc:creator>Sef Kloninger</dc:creator><description>&lt;img class="size-full wp-image-353 alignright" style="border: 0px;" title="blog-folder-done" src="http://sef.kloninger.com/f/blog-folder-done.png" alt="" width="107" height="41"&gt;

&lt;p&gt;
I've developed a nice little way to manage my work in progress folders.



&lt;/p&gt;&lt;p&gt;
I keep a bunch of folders around where I can stick things that are in-flight: one for home projects, one for blogs, etc. I like accumulating ideas in there, one idea per file, that I can come back to and fuss over until something is ready.



&lt;/p&gt;&lt;p&gt;
The folder is flypaper for ideas and notes.  My blog folder has about twenty files right now.



&lt;/p&gt;&lt;p&gt;
Using "ls", and relying on file and directory modification times, is a useful way to keep track of all these files.  Here's how.



&lt;/p&gt;&lt;p&gt;
As projects are finished I move them into a "done" folder. This gets them out of the way.  A useful side effect is the modification time of the done directly itself gets updated.



&lt;/p&gt;&lt;p&gt;
The in-flight projects I care about most are the ones most recently updated: as an idea gets older it becomes less and less interesting.  When looking at this directory I use the "ls -ltr" command.  "l" means long (so you can see dates), "t" means sort by modification time, and "r" reverses that sort, so you see latest modified on the bottom.

&lt;/p&gt;&lt;p align="center"&gt;
&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;img class="aligncenter  wp-image-352" style="border: 0px;" title="blog-folder-detail" src="http://sef.kloninger.com/f/blog-folder-detail.png" alt="" width="719" height="275"&gt;&lt;/p&gt;

&lt;p&gt;
The old files are at the top where I don't worry about them.  Some even scroll off the top of the screen, that's fine.  The done folder is a nice visual line for when something was last completed (say, published).  Having a separate color for directories makes this visually apparent.  And the bottom of the list are those most recently modified. Generally I work on the bottom up. Sometimes I go back to an old idea and add some notes. That bumps it to the top of the line -- it is interesting again.



&lt;/p&gt;&lt;p&gt;
I probably type "ls -ltr" at least 5 times an hour.  I've never aliased it since my muscle memory is so strong (but maybe I still should).



 &lt;/p&gt;</description><category>Life</category><category>Technology</category><guid>http://sef.kloninger.com/posts/201208wip-folders-with-ls.html</guid><pubDate>Tue, 07 Aug 2012 08:56:53 GMT</pubDate></item><item><title>The Day I Took Down 100,000 Web Sites</title><link>http://sef.kloninger.com/posts/201207taking-down-100000-sites.html</link><dc:creator>Sef Kloninger</dc:creator><description>&lt;img class="alignright size-full wp-image-343" style="border: 0px;" title="fire" src="http://sef.kloninger.com/f/fire.png" alt="fire alarm" width="300" height="240"&gt;

&lt;p&gt;
Every engineer has their "the day I did something very very bad" story. This is mine.


&lt;/p&gt;&lt;p&gt;
It was my last week at &lt;a href="http://www.ning.com/"&gt;Ning&lt;/a&gt;. For about a year I ran the Infrastructure and Operations group. It was the end of a good stretch, working with a strong team on hard problems.



&lt;/p&gt;&lt;p&gt;
In early 2010 (before I joined) Ning had successfully switched from a premium to paid model. Of Ning's two million social networks some were thriving onine communities, but many weren't. Trading those in for one hundred thousand good paying customers had been the right thing for the business. We kept around the 1.9M orphaned sites for some time in case someone wanted to assume ownership and start paying. By late 2011 the revival rate had dropped low enough that it was time to clear out the cruft.



&lt;/p&gt;&lt;p&gt;
I volunteered for the cleanup. I enjoyed little projects like this because it kept my hands in the code and took away a task that would be a chore and distraction for the engineers. The job was some SQL queries, scripting, load testing, checking, and double-checking. The hardest part was ensuring we had the right list of networks to delete.



&lt;/p&gt;&lt;p&gt;
It took about two months to write and run the scripts. I felt good that it had gone through uneventfully.



&lt;/p&gt;&lt;p&gt;
There was a legacy corner of our system that hadn't been included in my cleanup pass. I hadn't worried about it at first since it was just a few thousand networks. But now that I was leaving Ning I wanted to tie off my loose end projects, and this was one. I assembled the list of stragglers and ran my scripts. The 2,000 deletes went quickly. This was 11:00 AM on regular workday -- my last Wednesday on the job.



&lt;/p&gt;&lt;p&gt;
I immediately knew that I had done something very wrong. Since I sat close to the Customer Advocacy group I heard their IM clients and phones light up. Every Ning page was a "We're Sorry" 404 page. Oh crap.



&lt;/p&gt;&lt;p&gt;
It only took a couple of minutes to find the problem. One of the networks I had marked for deletion had core Javascript and CSS needed by every Ning network -- important stuff. The network, "socialnetworkmain" was known to everyone as being important, and if I had done my spot checks better, I would have seen it straight away. Instead, I had been sloppy.



&lt;/p&gt;&lt;p&gt;
The backdoor method I was using bypassed the safeties we had in place to protect our "really important" networks.



&lt;/p&gt;&lt;p&gt;
Luckily, &lt;a href="https://twitter.com/myelin"&gt;Phil&lt;/a&gt;, one of our top-notch infrastructure engineers was sitting close by and quickly restored the network through the backend. Things returned to normal almost immediately. That feeling of panic started to back off. The jokes started and we started to relax.



&lt;/p&gt;&lt;p&gt;
It took us another few hours to find and fix second and third order effects of my snafu. The network creation flow was broken -- fixed. An in-house monitoring system was dying silently -- fixed. And so on.



&lt;/p&gt;&lt;p align="center"&gt;
&lt;a title="Dilbert strip where he screwed up big-time" href="http://dilbert.com/strips/comic/1995-08-18/"&gt;&lt;img src="http://dilbert.com/dyn/str_strip/000000000/00000000/0000000/000000/20000/1000/000/21076/21076.strip.gif" alt="Dilbert.com" border="0"&gt;&lt;/a&gt;



&lt;/p&gt;&lt;p&gt;
I learned four lessons:

&lt;/p&gt;&lt;p&gt;
&lt;/p&gt;&lt;ol&gt;
	&lt;li&gt;&lt;strong&gt;Undo is your friend.&lt;/strong&gt; The tooling or features to revert your change will take time, but you will be happy to have it if you ever need it.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Make changes during the day.&lt;/strong&gt; Resolving a hairy problem is hard if you don't have the right people, and when the people you do have are tired and foggy. This incident might have taken hours to resolve instead of minutes in the middle of the night.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;It's not over until it's over.&lt;/strong&gt; Once in crisis mode, you're eager to be get out of it. Once the main problem is solved it is tempting to exhale, go to lunch, go back to bed, whatever. But aftereffects might take a while to show up, or may just be harder to find.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Disproportionate effects.&lt;/strong&gt; We all know that our complex systems nonlinear failure modes. Incidents like these are reminders that small changes have big effects. Said another way, even small things should be taken seriously.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
My time at Akamai had prepared me well for managing a crisis. But it's nice to have a refresher course every now and then.



 &lt;/p&gt;</description><category>Technology</category><guid>http://sef.kloninger.com/posts/201207taking-down-100000-sites.html</guid><pubDate>Wed, 25 Jul 2012 17:56:57 GMT</pubDate></item><item><title>On-Line Education Is Really Interesting Right Now</title><link>http://sef.kloninger.com/posts/201207on-line-education.html</link><dc:creator>Sef Kloninger</dc:creator><description>&lt;img class="alignright  wp-image-307" style="border: 0px;" title="lecture-hall" src="http://sef.kloninger.com/f/lecture-hall-300x199.jpeg" alt="" width="270" height="179"&gt;


&lt;p&gt;
I've joined a research project at Stanford University (my alma mater).  I am working with a small team to build a platform for on-line education. This post explains what we're building, my part in it, and why this is an interesting area right now.

&lt;/p&gt;&lt;h2&gt;Class2Go&lt;/h2&gt;

&lt;p&gt;
We are building Class2Go, an application to put Stanford classes on line.  Envision a video-driven web site with exercises and tests.  It will run much like a class today (professors, TA's, lectures, homework, tests, schedules) but with everything happening on-line.  For some kinds of classes this could improve the classroom experience for enrolled students; the excitement comes when you can bring in the a much larger set of non-enrolled students.



&lt;/p&gt;&lt;p&gt;
The professors who have expressed interest so far are those who want to &lt;a title="Flip teaching page on wikipedia" href="http://en.wikipedia.org/wiki/Flip_teaching" target="_blank"&gt;flip their classrooms&lt;/a&gt; or host a &lt;a title="Massive open online course page on wikipedia" href="http://en.wikipedia.org/wiki/Massive_open_online_course" target="_blank"&gt;Massive Open On-Line Course&lt;/a&gt; (MOOC). Others have ideas on experimentation with the learning process itself. For example, do students learn better when they see slides, a talking head, or both? A large enough student population makes meaningful studies possible and cheap.

&lt;/p&gt;&lt;p&gt;
There are a bunch of features needed over and above basic basic video.  First, can we devise a good system for students to grade each others work? This is an absolute must to do anything in the humanities at large scale.  We have some ideas of how to do peer evaluation, but it's an area that needs much more experimentation. A second important feature is enabling off-line use from laptops and tablets.  When we think of disconnected students we typically think of commuters, but we've heard it's just as important (or maybe more so) for students in developing countries where bandwidth is precious.

&lt;/p&gt;&lt;p&gt;
While there are &lt;a title="Link to Coursera site" href="https://www.coursera.org/" target="_blank"&gt;commercial&lt;/a&gt; &lt;a title="Link to Udacity site" href="http://www.udacity.com/" target="_blank"&gt;offerings&lt;/a&gt; to do this, and even things from other established &lt;a title="Link to Ed X site" href="http://www.edxonline.org/" target="_blank"&gt;universities&lt;/a&gt;, Class2Go will be different in three important ways:

&lt;/p&gt;&lt;p&gt;
&lt;/p&gt;&lt;ul&gt;
	&lt;li&gt;Research will be first and foremost. Hey prof, you want to do a wacky experiment? We can help.&lt;/li&gt;
	&lt;li&gt;Value produced by the course is retained and controlled by the professor and the university.  That value comes from the assets (video, homework) but even more so the community and technology.&lt;/li&gt;
	&lt;li&gt;The professors will have quick and ready access to their data. No waiting in lines for reports.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Stanford Professor Rob Reich made a very coherent argument for this in a &lt;a title="Rob Reich blog post comparing Universities to Newspapers" href="http://www.stanford.edu/group/reichresearch/cgi-bin/site/2012/05/18/sending-universities-down-the-path-of-the-newspaper-industry/" target="_blank"&gt;recent blog post&lt;/a&gt;. (Getting to work with smart people like him is a major job perq, by the way.)

&lt;/p&gt;&lt;p&gt;
Part of what makes this doable is that there are so many great building blocks available.  We plan to use YouTube for video and the &lt;a href="https://github.com/khan/khan-exercises" target="_blank"&gt;Khan Academy&lt;/a&gt; framework for exercises.   &lt;a href="https://piazza.com/" target="_blank"&gt;Piazza&lt;/a&gt; has great discussions and forums to start with. Because of all this good stuff, we feel good about getting something strong out by the Fall for a couple of courses, and then expanding from there.

&lt;/p&gt;&lt;p&gt;
And me?  I'm the line manager. It's fun to work on a project of this size where I can keep my hands dirty. For example, this week I'll be working on authentication (oauth).

&lt;/p&gt;&lt;h2&gt;Why Education, Why Now?&lt;/h2&gt;

&lt;p&gt;
Two things brought me to education.

&lt;/p&gt;&lt;p&gt;
Firstly, education is uniquely important. I challenge you to name another human pursuit that is as important, consumes so many resources (for good reason), and can be so transformative when done well.  The other two that come to mind are health and agriculture. But I'd say education is right up there.

&lt;/p&gt;&lt;p&gt;
And second, education is changing right now. Of the meetings I've had while &lt;a title="My Sabbatical" href="http://sef.kloninger.com/2012/04/my-sabbatical/" target="_blank"&gt;on sabbatical&lt;/a&gt;  some of the most interesting have been about education. Why can't information technology have as big an impact on how people learn as it has had on everything else? Technology could mean making it available to to many more students, in different places and of different means. Educators could spend less time lecturing (dry stuff, to be sure) and more time working with students. Better measurement and analysis and could give educators near-real-time feedback and students tailor-made homework. Those are just a few of the examples that I heard about that got me excited.

&lt;/p&gt;&lt;p&gt;
I look forward to doing something that will make even a little difference here. I'll blog about my experiences along the way.

&lt;/p&gt;&lt;p&gt;
PS - &lt;a title="Peter Norvig @ TED" href="http://fm.schmoller.net/2012/07/peter-norvigs-ted-talk-about-the-ai-course.html" target="_blank"&gt;Peter Norvig's TED Talk&lt;/a&gt; captured the reasons and potential nicely.  That seven minutes is worth your time.

&lt;/p&gt;</description><category>Education</category><category>Technology</category><guid>http://sef.kloninger.com/posts/201207on-line-education.html</guid><pubDate>Mon, 09 Jul 2012 19:49:31 GMT</pubDate></item><item><title>FizzBuzz Questions for Engineering Managers</title><link>http://sef.kloninger.com/posts/201205fizzbuzz-for-managers.html</link><dc:creator>Sef Kloninger</dc:creator><description>&lt;img class="size-full wp-image-272 alignleft" style="padding:20px; float:left" title="fizzbuzz" src="http://sef.kloninger.com/f/fizzbuzz.png" alt="" width="116" height="166"&gt;

&lt;p&gt;You probably wouldn't hire an engineer that you hadn't seen code. But people tend to hire  engineering managers without seeing them manage. I contend that's a big oversight: you should see them manage on their feet, at least a little.  But how?

&lt;/p&gt;&lt;p&gt;
I'm thinking along the lines of the "FizzBuzz" class of questions. I believe they got some fame with &lt;a href="http://imranontech.com/2007/01/24/using-fizzbuzz-to-find-developers-who-grok-coding/" target="_blank"&gt;this article&lt;/a&gt; in 2007, and Google &lt;a href="http://www.google.com/trends/?q=fizzbuzz" target="_blank"&gt;seems to support this&lt;/a&gt;. Anyway, they are simple programming problems that should be no-brainers for any decent engineer. But they are useful exactly because of the surprisingly large number of candidates who flame out on them. By some accounts, as high as 50%.



&lt;/p&gt;&lt;p&gt;
So what we want are something similar for engineering managers:  practical questions that can be done within the constraints of an interview. Here are a few that have been useful for me.

&lt;/p&gt;&lt;h2&gt;Role Playing&lt;/h2&gt;

&lt;p&gt;
Instead of asking them how they would do something, just ask them to do that thing in front of you. Role playing can be awkward if you've never done it before, but give it a try. Once you get over the hump and try it, it can be fun. Here are three good scenarios I've used.

&lt;/p&gt;&lt;p&gt;
&lt;/p&gt;&lt;ul&gt;
	&lt;li&gt;&lt;em&gt;"I'm a product manager. Customer Foo (say, one of our biggest customers) wants a feature right before the release is to go out. You're the VP of Engineering. You feel like this will destabilize your release.  How do you say no?"&lt;/em&gt;  Sometimes it can be fun to play out the natural follow-up, when they go over your head to the CEO.&lt;/li&gt;
	&lt;li&gt;&lt;em&gt;"I'm a slacking employee. I have the skills, but for some reason I haven't been productive lately. It's our weekly one-on-one time -- what do you say?"&lt;/em&gt;&lt;/li&gt;
	&lt;li&gt;&lt;em&gt;"You have to lay someone off. How do you prepare? What do you say?"&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
If they have follow up questions, or dispute the premise, then play it out. Usually those end up being the most insightful and fun interviews. Also, one warning: questions like these can take you far down the rabbit hole and use up the whole hour if you're not careful.  Remember that its your time.  You should cut them off and switch to the next question, abruptly if need be, to get to everything you need to cover.

&lt;/p&gt;&lt;h2&gt;Nuts and Bolts&lt;/h2&gt;

&lt;p&gt;
Ask candidates about the mechanics of how they do their job and you can get insight into their experience and values. What tools (wikis, bug tracking, source control, continuous testing) do they use? Do they run team meetings or daily standups? If so, how do these go?



&lt;/p&gt;&lt;p&gt;
What you're looking for are &lt;em&gt;thoughtful&lt;/em&gt; answers. Anyone who has used these tools a lot should have opinions about the them. If they don't then they don't care (bad) or they haven't done the work (bad). Are they negative about everything? Are they flexible?

&lt;/p&gt;&lt;h2&gt;Motivation&lt;/h2&gt;

&lt;p&gt;
For me this often is the clincher. Why did you get into engineering management in the first place? Why are you doing it now? I won't say what I consider to be good answers, since this varies a lot and should be pretty personal. Again, what you're looking for is a thoughtful answer.



&lt;/p&gt;&lt;p&gt;
This can be most useful for turning up red-flag responses. You don't want the person who did it for power ("I wanted to boss people around") or ambition ("I wanted to make more money") or just fell into it.  Trust your gut for answers that don't sound genuine and ask probing follow-ups.



&lt;/p&gt;&lt;p&gt;
I find questions like these can lead to more insightful conversations and get the candidate off-script faster than the typical resume walkthrough.



 &lt;/p&gt;</description><category>Management</category><category>Technology</category><guid>http://sef.kloninger.com/posts/201205fizzbuzz-for-managers.html</guid><pubDate>Wed, 23 May 2012 17:06:59 GMT</pubDate></item><item><title>Why Quit?  Because They Have Bigger Monitors</title><link>http://sef.kloninger.com/posts/201205engineering-culture-litmus-tests.html</link><dc:creator>Sef Kloninger</dc:creator><description>&lt;p&gt;
Good engineers are attracted to places with a strong engineering culture. But how can you see what the culture is really like from the outside? Here are my two quick-and-dirty indicators.

&lt;img class="alignright size-full wp-image-230" style="border: 0px;" title="testtubes" src="http://sef.kloninger.com/f/testtubes.png" alt="" width="149" height="200"&gt;


&lt;/p&gt;&lt;p&gt;
First a word about what I mean by an engineering culture. It means engineers are valued and important. Some implications:
&lt;/p&gt;

&lt;p&gt;
&lt;/p&gt;&lt;ul&gt;
	&lt;li&gt;How are decisions made? In an engineering culture, technical people have input into what gets built, when, and by whom.  Not signoff, but a real say.&lt;/li&gt;
	&lt;li&gt;Is there respect for the craft of making software? Coding is still creative work that requires the right time and space. Some projets are tough to predict how long they will take, and that's needs to be OK.&lt;/li&gt;
	&lt;li&gt;Infrastructure. How hard is it for the people who know (engineers, managers) to justify to their bosses when work is needed on non-feature driven stuff? This could be in the runtime system (like scaling work on the message queue) or back office (like build systems or version control).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
Unfortunately, teasing this out in an interview can be tricky unless you have someone you really know and trust on the inside.

&lt;/p&gt;&lt;p&gt;
&lt;/p&gt;&lt;h2&gt;How big are the monitors?&lt;/h2&gt;

A story from a prior company. I was an engineering manager that had a retention problem. One of the engineers on my team quit to go to a smaller, hipper company. This was from my exit interview:

&lt;p&gt;
&lt;/p&gt;&lt;blockquote&gt;

&lt;p&gt;
&lt;strong&gt;Me&lt;/strong&gt;: why are you leaving?

&lt;/p&gt;&lt;p&gt;
&lt;strong&gt;Him&lt;/strong&gt;: because they have bigger monitors.

&lt;/p&gt;&lt;p&gt;
&lt;strong&gt;Me&lt;/strong&gt;: (incredulous) are you kidding? we can get you a bigger monitor.

&lt;/p&gt;&lt;p&gt;
&lt;strong&gt;Him&lt;/strong&gt;: it's not just me -- everyone has big monitors.

&lt;/p&gt;&lt;p&gt;
&lt;strong&gt;Me&lt;/strong&gt;: why is that so important?

&lt;/p&gt;&lt;p&gt;
&lt;strong&gt;Him&lt;/strong&gt;: because it shows how much they value my time. The extra money to cram that many more pixels into my retina must be worth it to them.

&lt;/p&gt;&lt;/blockquote&gt;

And now I understand that this is totally true. Places that value their people consider equipment expenses small compared to the productivity (and happiness) of their people.  The best engineers are given the best tools to do their jobs. Big monitors are a very visible sign of this.

&lt;h2&gt;Can people choose their own email addresses?&lt;/h2&gt;

Non-engineers sometimes don't appreciate how important an email address is. It's your identity on line. A strict naming convention (first name last initial, or worse, last name first initial) indicates place that values conformity over engineer happiness. Worse, its a great way to make their people feel like cogs or "human resources," not the cool individuals that they are.

&lt;p&gt;
(Aside: let's do away with the term Human Resources.  It's horrible.)

&lt;/p&gt;&lt;p&gt;
This one is important for me personally since I have a weird first name. If you don't let me be &lt;code&gt;sef@company.com&lt;/code&gt; then you get major demerits in my book. And no, clunky alias tricks, like a mailing list with one member in it, doesn't count. It's what you see on your shell prompt that matters; it's what &lt;code&gt;whoami&lt;/code&gt; returns that matters.

&lt;/p&gt;&lt;p align="center"&gt;
&lt;img class="alignnone size-full wp-image-235" style="border: 0px;" title="whoami" src="http://sef.kloninger.com/f/whoami.png" alt="" width="556" height="226"&gt;

&lt;/p&gt;&lt;p&gt;
One final word: this isn't a slam on you hardworking IT guys and gals who keep important things running and have to enforce the rules you're given. Instead, I'm speaking to the bad policies (usually stemming from bad cultures) that can put you into bad positions. If you are at such a place, hunker down and pray for daylight.

 &lt;/p&gt;</description><category>Management</category><category>Technology</category><guid>http://sef.kloninger.com/posts/201205engineering-culture-litmus-tests.html</guid><pubDate>Thu, 17 May 2012 23:01:44 GMT</pubDate></item></channel></rss>